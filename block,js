# Blockchain Project - First code set.
# index: A unique number tracking the position of every block in the entire blockchain.
# timestamp: Records the time of occurrence of each completed transaction.
# data: Data shown in reference to the completed transactions, such as sender details, recipient’s details, and quantity transacted.
# blockHash: Points to preceding block in the blockchain, which is important in maintaining the blockchain’s integrity.
# The computeHash method is to calculate the hash of the block based on its properties, given in the data below.

const SHA256 = require('crypto-js/sha256');
class mainBlock {
  constructor(index, timestamp, data, blockHash = " ") {
    this.index = index;
    this.timestamp = timestamp;
    this.data = data;
    this.blockHash = blockHash;
    this.hash = this.computeHash();
  }
  computeHash() {
    return SHA256(this.index + this.blockHash + this.timestamp + JSON.stringify(this.data)).toString();
  }
}

class CryptoBlock{
    constructor(){
        this.blockchain = [this.startGenesisBlock()];     
    }
    startGenesisBlock(){
        return new CryptoBlock(0, "01/01/2020", "The Initial Block in the Blockchain", "0");
    }
    obtainLatestBlock(){
        return this.blockchain[this.blockchain.length - 1];
    }
    addNewBlock(newBlock){
        newBlock.precedingHash = this.obtainLatestBlock().hash;
        newBlock.hash = newBlock.computeHash();        
        this.blockchain.push(newBlock);
    }
}

let jCoin = new CryptoBlockchain();
jCoin.addNewBlock(new CryptoBlock(1, "07/17/2020", {sender: "Frank Johnson", recipient: "Katherein Gains", quantity: 510}));
jCoin.addNewBlock(new CryptoBlock(2, "07/21/2020", {sender: "Stacey Meninglow", recipient: "Mark Templeton", quantity: 250}) );
console.log(JSON.stringify(jCoin, null, 4));

checkChainValidity(){
        for(let i = 1; i < this.blockchain.length; i++){
            const currentBlock = this.blockchain[i];
            const precedingBlock= this.blockchain[i-1];

          if(currentBlock.hash !== currentBlock.computeHash()){
              return false;
          }
          if(currentBlock.precedingHash !== precedingBlock.hash)
            return false;
        }
        return true;
    }

proofOfWork(difficulty){
      while(this.hash.substring(0, difficulty) !==Array(difficulty + 1).join("0")){
          this.nonce++;
          this.hash = this.computeHash();
      }        
  }
